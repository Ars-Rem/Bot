import logging
import sys
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import config
from sqliter import SQLiter
from sqliter import USER
from sqliter import PHONE
from sqliter import ALL
from face import Facebook

print(sys.platform)

API_TOKEN = config.TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# sql
db = SQLiter('db.db')
db_user = USER('db.db')
db_phone = PHONE('db.db')
db_all = ALL('db.db')

sg = Facebook('lastkey.txt')


@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    if not db_user.subscriber_exist(message.from_user.id):
        db_user.add_subscriber(message.from_user.id, message.from_user.full_name, True)
    else:
        db_user.update_subscription(message.from_user.id, True)
    await message.answer('–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É')

    # TODO:–¥–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    # bot.answer_callback_query(
    # callback_query_id=call.id, show_alert=False,
    #                         text=config.phone_number)


@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
    if not db_user.subscriber_exist(message.from_user.id):
        db_user.add_subscriber(message.from_user.id, message.from_user.full_name, False)
    else:
        db_user.update_subscription(message.from_user.id, False)
    await message.answer('–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ')
    # TODO:–¥–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    # bot.answer_callback_query(
    # callback_query_id=call.id, show_alert=False,
    #                         text=config.phone_number)


@dp.message_handler(commands=['start'], commands_prefix='!/')
async def send_welcome(message: types.Message):
    """ sti = open(config.sticker, 'rb')
     bot.send_sticker(message.chat.id, sti)"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    st = KeyboardButton('start')
    markup.add(st)
    if not db_user.subscriber_exist(message.from_user.id):
        db_user.add_subscriber(message.from_user.id, message.from_user.full_name, datetime.now(), True)
    else:
        db_user.update_subscription(message.from_user.id, True)
    # await message.answer('–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É')
    # keyboard
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    item1 = KeyboardButton('–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥')
    item2 = KeyboardButton("–ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫")
    markup.add(item1, item2)
    await message.answer(f'–î–æ–±—Ä–∏–π –¥–µ–Ω—å, {message.from_user.first_name}, –¥–µ –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?',
                         parse_mode=types.ParseMode.MARKDOWN, reply_markup=markup)


@dp.message_handler(content_types=['text'])
async def process_photo_command(message: types.Message, request='yes'):
    if message.chat.type == 'private':
        if message.text == '–ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫':

            await bot.send_message(message.chat.id, 'üòä')  # TODO: —Å–¥–µ–ª–∞—Ç—å –≤—Å–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ - –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–∫–æ–π —Ç–æ –≥–æ—Ä–æ–¥
            # photo = open(config.foto, 'rb')
            # await bot.send_photo(message.chat.id, photo, parse_mode=types.ParseMode.MARKDOWN)

        elif message.text == '–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥':
            # keyboard
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            item1 = KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–∏", request_contact=False)
            item2 = KeyboardButton("–ë—ñ–ª—å—à–µ —Ç—É—Ç")
            item3 = KeyboardButton("–ê–∫—Ü—ñ—ó üòä")
            item4 = KeyboardButton("–ë–∞–∑–∞")
            item5 = KeyboardButton("–í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
            item6 = KeyboardButton(text='–ó–∞–º–æ–≤–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫', request_contact=True)
            item7 = KeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞–º—ñ—Ä–∏', request_contact=False)
            # item5 = types.KeyboardButton("–ó–∞–ª–∏—à–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)
            markup.add(item1, item2, item3)
            markup.add(item6, item7)
            markup.row(item5)

            if message.chat.id in config.admin_all:
                markup.row(item4)

            # TODO: –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ?
            await message.answer(config.hello_text(message.from_user.first_name), parse_mode=types.ParseMode.MARKDOWN,
                                 reply_markup=markup)

        elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏':
            photo = open(config.foto, 'rb')
            await bot.send_photo(message.chat.id, photo, parse_mode=types.ParseMode.MARKDOWN)

        elif message.text == "–ê–∫—Ü—ñ—ó üòä":
            markup = InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
            item1 = InlineKeyboardButton("–î–≤–µ—Ä—ñ –≤—Ö—ñ–¥–Ω—ñ", callback_data='action1')
            item2 = InlineKeyboardButton("–î–≤–µ—Ä—ñ –º—ñ–∂–∫—ñ–º–Ω–∞—Ç–Ω—ñ", callback_data='action2')
            item3 = InlineKeyboardButton("–õ–∞–º—ñ–Ω–∞—Ç", callback_data='action3')
            item4 = InlineKeyboardButton("–ñ–∞–ª—é–∑—ñ", callback_data='action4')
            markup.add(item1, item2, item3, item4)
            await bot.send_message(message.chat.id, 'üòä', reply_markup=markup)

        elif message.text == "–ë—ñ–ª—å—à–µ —Ç—É—Ç":
            #   bot.send_message(message.chat.id, 'https://www.facebook.com/watch/?v=653010194852467')
            markup = types.InlineKeyboardMarkup(row_width=1)
            item = types.InlineKeyboardButton(text="–Ω–∞—Ç–∏—Å–Ω–∏ –º–µ–Ω–µ", url=config.URL)
            markup.add(item)
            await bot.send_message(message.chat.id, 'üòä', reply_markup=markup)

        elif message.text == '–í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ':
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            item1 = KeyboardButton('–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥')
            item2 = KeyboardButton("–ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫")
            markup.add(item1, item2)
            await message.answer(f'–î–æ–±—Ä–∏–π –¥–µ–Ω—å, {message.from_user.first_name}, –¥–µ –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?',
                                 parse_mode=types.ParseMode.MARKDOWN, reply_markup=markup)

        elif message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞–º—ñ—Ä–∏":
            markup = InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
            item1 = InlineKeyboardButton("–î–≤–µ—Ä—ñ –≤—Ö—ñ–¥–Ω—ñ", callback_data='act1')
            item2 = InlineKeyboardButton("–î–≤–µ—Ä—ñ –º—ñ–∂–∫—ñ–º–Ω–∞—Ç–Ω—ñ", callback_data='act2')
            item3 = InlineKeyboardButton("–í—ñ–∫–Ω–∞", callback_data='act3')
            item4 = InlineKeyboardButton("–ñ–∞–ª—é–∑—ñ", callback_data='act4')
            markup.add(item1, item2, item3, item4)
            await bot.send_message(message.chat.id, '–©–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?', reply_markup=markup)


        elif message.text == '–ë–∞–∑–∞':
            try:
                for admins in config.admin_all:
                    await bot.send_message(admins, db.send_recording())
            except TypeError:
                print("–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            print(db.send_callback_all())  # TODO remove
        else:
            await bot.send_message(message.from_user.id, '–í–∏–∫–æ—Ä—É—Å—Ç–æ–≤—É–π—Ç–µ, –±—É–¥—å-–ª–∞—Å–∫–∞, –º–µ–Ω—é')
            db.add_text(message.from_user.id, message.text)


# save phone number in db.db'sub'
@dp.message_handler(content_types=["contact"])
async def tel_number(message):
    db_phone.add_phone_number(message.contact['phone_number'], message.contact['first_name'],
                              message.contact['last_name'], message.contact['user_id'])
    db_all.merged()
    try:
        answer = "–Ü–º'—è: {} {},\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {}" \
            .format(message.contact['first_name'], message.contact['last_name'], message.contact['phone_number'])

        for admins in config.admin_all:
            await bot.send_message(admins, answer)

    except TypeError:
        print("–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    print(db.send_callback_all())  # TODO remove

    await bot.send_message(message.chat.id, '–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–æ–∫')


@dp.callback_query_handler(lambda call: True)
async def callback_inline(call):
    try:
        if call.message:
            if call.data == 'action1':
                await bot.send_message(call.message.chat.id, '–≥–æ—Ç—É—î–º–æ —Å—é—Ä–ø—Ä–∏–∑ üòä')
                await bot.send_message(call.message.chat.id, 'üòä')
                # photo_vhidni = open(config.foto, 'rb')
                # bot.send_photo(call.message.chat.id, photo)
            elif call.data == 'action2':
                # bot.send_message(call.message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏2')
                photo_interior_doors = open(config.foto_special_offer_interior_doors, 'rb')
                await bot.send_photo(call.message.chat.id, photo_interior_doors)
            elif call.data == 'action3':
                await bot.send_message(call.message.chat.id, '–≥–æ—Ç—É—î–º–æ —Å—é—Ä–ø—Ä–∏–∑ üòä')
                await bot.send_message(call.message.chat.id, 'üòä')
            elif call.data == 'action4':
                # bot.send_message(call.message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏4')
                photo_blinds_promotion = open(config.foto_blinds_promotion, 'rb')
                await bot.send_photo(call.message.chat.id, photo_blinds_promotion)

            # ACT1-4
            if call.data == 'act1':
                db.add_callback(call.message.chat.id, call.message.chat.full_name, config.items_list[0], datetime.now())

                # message for admins
                for admins in config.admin_all:
                    await bot.send_message(admins, '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!')
                for admins in config.admin_all:
                    await bot.send_message(admins, db.send_recording())
                # message for all
                await bot.send_message(call.message.chat.id, '–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–æ–∫')


            elif call.data == 'act2':
                db.add_callback(call.message.chat.id, call.message.chat.full_name, config.items_list[1],
                                datetime.now())
                for admins in config.admin_all:
                    await bot.send_message(admins, '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!')

                for admins in config.admin_all:
                    await bot.send_message(admins, db.send_recording())
                await bot.send_message(call.message.chat.id, '–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–æ–∫')

            elif call.data == 'act3':
                db.add_callback(call.message.chat.id, call.message.chat.full_name, config.items_list[2], datetime.now())
                for admins in config.admin_all:
                    await bot.send_message(admins, '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!')

                for admins in config.admin_all:
                    await bot.send_message(admins, db.send_recording())
                await bot.send_message(call.message.chat.id, '–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–æ–∫')


            elif call.data == 'act4':
                db.add_callback(call.message.chat.id, call.message.chat.full_name, config.items_list[3], datetime.now())
                for admins in config.admin_all:
                    await bot.send_message(admins, '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!')

                for admins in config.admin_all:
                    await bot.send_message(admins, db.send_recording())

                await bot.send_message(call.message.chat.id, '–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–æ–∫')
            else:
                pass

    except Exception as e:
        print(repr(e))


if __name__ == '__main__':
    # dp.loop.create_task(scheduled(10))  # 10 —Å–µ–∫—É–Ω–¥
    executor.start_polling(dp, skip_updates=True)
